{"version":3,"sources":["actions/boardActions.js","common/actionsTypes.js","actions/gameActions.js","common/constants.js","store/initialState.js","reducers/boardReducer.js","containers/GameBoard/Cell/Styled.js","containers/GameBoard/Cell/Cell.js","components/InputWithLabel.js","components/Button.js","components/ToggleSwitch.js","components/Logo.js","components/GameIndicator.js","components/ErrorBoundary.js","components/Loader.js","containers/GameBoard/Styled.js","containers/GameBoard/GameBoard.js","containers/GameConfig/Styled.js","containers/GameConfig/GameConfig.js","containers/GameScreen/Styled.js","containers/GameScreen/GameScreen.js","containers/MaybeLoader.js","middlewares/gameMiddleware.js","reducers/configReducer.js","reducers/gameReducer.js","reducers/index.js","store/index.js","containers/AppWrapper.js","containers/Styled.js","containers/Minesweeper.js","index.js"],"names":["onCellClick","id","type","payload","onCellMarked","onGameOver","resetGame","config","setSupermanMode","setNoMoreFlagsNot","dispatch","setTimeout","store_initialState","width","height","mines","board","game","status","isSuperman","markedCells","loading","tempMessage","boardReducer","state","arguments","length","undefined","initialState","action","_action$payload","createBoard","result","Object","toConsumableArray","revealEdgesIterative","cell","getCell","isMarked","isRevealed","cellId","stack","pop","value","edges","forEach","cId","alreadyIncluded","push","randomMiles","generateRandomMilesCords","rowIndex","row","colIndex","generateIdKey","cellEdges","getCellEdges","isMined","includes","countMinedCells","createCell","col","numberOfMiles","Math","floor","random","key","minedEdges","reduce","curr","isMine","concat","cords","split","getCordsFromKey","GridCell","styled","div","_templateObject","_ref","theme","cellClickedBgColor","cellBgColor","_ref2","Cell","React","memo","onCellMark","react_default","a","createElement","onClick","e","shiftKey","noop","defaultProps","InputWithLabelWrapper","InputWithLabel_templateObject","Label","label","_templateObject2","Input","input","_templateObject3","InputWithLabel","props","elementId","placeholder","min","max","onChange","htmlFor","name","Button","button","Button_templateObject","btnBgColor","screenBtnColor","_ref3","btnHoverBgColor","ToggleSwitchStyled","ToggleSwitch_templateObject","isClickedState","cellHoverBgColor","SupermanSwitch","ToggleSwitch_templateObject2","color","backgroundColor","fontWeight","LogoStyled","Logo_templateObject","Logo","text","GameIndicator","GameIndicator_templateObject","isGameOver","isGameDone","bgColorResult","ErrorBoundary","hasError","error","errorInfo","console","this","children","Component","animation","keyframes","Loader_templateObject","Loader","Loader_templateObject2","Grid","Styled_templateObject","_ref$gameWidth","gameWidth","_ref2$gameHeight","gameHeight","gridBgColor","GameBoard","Styled_templateObject2","_this$props","_this","actions","_this$props2","remainingFlags","_this$props3","_this2","_this$props4","isSupermanMode","components_GameIndicator","map","Cell_Cell","connect","store","combinedActions","bindActionCreators","ConfigWrapper","GameConfig_Styled_templateObject","configBgColor","GameConfig_Styled_templateObject2","objectSpread2","_useState","useState","_useState2","slicedToArray","setGameWidthToState","_useState3","_useState4","setGameHeightToState","_useState5","_useState6","gameMines","setGameMinesToState","validate","components_InputWithLabel","target","valueAsNumber","components_Button","title","disabled","rollToRight","GameScreen_Styled_templateObject","ScreenWrapper","GameScreen_Styled_templateObject2","screenBgColor","blinking","Styled_templateObject3","BlinkingText","_templateObject4","tempMessageExist","getText","components_Loader","gameMiddleware","getState","next","_getState","isAlreadyMarked","every","mc","configReducer","gameReducer","existingIndex","indexOf","splice","reducers","combineReducers","configureStore","externalState","internalState","middlewares","thunk","createStore","createRootReducer","compose","applyMiddleware","apply","AppWrapper","externalTheme","es","styled_components_browser_esm","components_ErrorBoundary","device","mobileL","GameWrapper","containers_Styled_templateObject","Minesweeper","containers_AppWrapper","containers_MaybeLoader","components_Logo","containers_GameConfig_GameConfig","containers_GameScreen_GameScreen","containers_GameBoard_GameBoard","window","wixDOM","minesweeper","mount","element","document","querySelector","callback","render","containers_Minesweeper","assign","unmount","unmountComponentAtNode","externalProps","appVersion"],"mappings":"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","file":"static/js/main.d9a3a1ce.chunk.js","sourcesContent":["import {\r\n  CELL_CLICKED,\r\n  GAME_OVER,\r\n  CELL_MARKED,\r\n  NO_MORE_FLAGS\r\n} from \"../common/actionsTypes\";\r\n\r\nexport const onCellClick = id => {\r\n  return {\r\n    type: CELL_CLICKED,\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const onCellMarked = id => {\r\n  return {\r\n    type: CELL_MARKED,\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const setNoMoreFlags = () => {\r\n  return {\r\n    type: NO_MORE_FLAGS\r\n  };\r\n};\r\n\r\nexport const onGameOver = id => {\r\n  return {\r\n    type: GAME_OVER,\r\n    payload: id\r\n  };\r\n};\r\n","export const SET_CONFIG = \"SET_CONFIG\";\r\nexport const SET_SUPERMAN_MODE = \"SET_SUPERMAN_MODE\";\r\nexport const INIT_GAME = \"INIT_GAME\";\r\nexport const GAME_OVER = \"GAME_OVER\";\r\nexport const GAME_DONE = \"GAME_DONE\";\r\nexport const GAME_LOADING = \"GAME_LOADING\";\r\nexport const CELL_CLICKED = \"CELL_CLICKED\";\r\nexport const CELL_MARKED = \"CELL_MARKED\";\r\nexport const NO_MORE_FLAGS = \"NO_MORE_FLAGS\";\r\nexport const SET_TEMP_MESSAGE = \"SET_TEMP_MESSAGE\";\r\n","import {\r\n  INIT_GAME,\r\n  SET_SUPERMAN_MODE,\r\n  GAME_DONE,\r\n  GAME_LOADING,\r\n  SET_TEMP_MESSAGE\r\n} from \"../common/actionsTypes\";\r\nimport { SCREEN_NO_MORE_FLAGS } from \"../common/constants\";\r\n\r\nexport const resetGame = config => {\r\n  return {\r\n    type: INIT_GAME,\r\n    payload: config\r\n  };\r\n};\r\nexport const setSupermanMode = () => {\r\n  return {\r\n    type: SET_SUPERMAN_MODE\r\n  };\r\n};\r\n\r\nexport const setGameDone = () => {\r\n  return {\r\n    type: GAME_DONE\r\n  };\r\n};\r\n\r\nexport const setGameLoading = bool => {\r\n  return {\r\n    type: GAME_LOADING,\r\n    payload: bool\r\n  };\r\n};\r\n\r\nexport const setNoMoreFlagsNot = () => dispatch => {\r\n  dispatch({\r\n    type: SET_TEMP_MESSAGE,\r\n    payload: SCREEN_NO_MORE_FLAGS\r\n  });\r\n  setTimeout(() => {\r\n    dispatch({\r\n      type: SET_TEMP_MESSAGE\r\n    });\r\n  }, 4000);\r\n};\r\n","export const MAX_WIDTH = 300;\r\nexport const MAX_HEIGHT = 300;\r\n\r\nexport const GAME_OVER_STATUS = \"OVER\";\r\nexport const GAME_PLAYING_STATUS = \"PLAYING\";\r\nexport const GAME_DONE_STATUS = \"DONE\";\r\n\r\nexport const SCREEN_GAME_OVER = \"GAME OVER ! YOU LOST !\";\r\nexport const SCREEN_GAME_PLAYING = \"GAME IS ON\";\r\nexport const SCREEN_GAME_DONE = \"WELL DONE ! YOU WON !\";\r\nexport const SCREEN_NO_MORE_FLAGS = \"NO FLAGS LEFT !\";\r\n\r\nexport const ERROR_RESTART_METHOD_DOESNT_EXIST =\r\n  \"The restart method does not exist in the GameConfig context.\";\r\n","import { GAME_PLAYING_STATUS } from \"../common/constants\";\r\n\r\nexport default {\r\n  config: {\r\n    width: 8,\r\n    height: 3,\r\n    mines: 5\r\n  },\r\n  board: [],\r\n  game: {\r\n    status: GAME_PLAYING_STATUS,\r\n    isSuperman: false,\r\n    markedCells: [],\r\n    loading: false,\r\n    tempMessage: \"\"\r\n  }\r\n};\r\n","import {\r\n  INIT_GAME,\r\n  CELL_CLICKED,\r\n  GAME_OVER,\r\n  CELL_MARKED\r\n} from \"../common/actionsTypes\";\r\nimport initialState from \"../store/initialState\";\r\n\r\nexport default (state = initialState.board, action) => {\r\n  switch (action.type) {\r\n    case INIT_GAME: {\r\n      const { width, height, mines } = action.payload;\r\n      const result = createBoard(width, height, mines);\r\n      return result;\r\n    }\r\n    case CELL_CLICKED: {\r\n      const result = [...state];\r\n      revealEdgesIterative(result)(action.payload);\r\n      return result;\r\n    }\r\n    case CELL_MARKED: {\r\n      const result = [...state];\r\n      const cell = getCell(result, action.payload);\r\n      cell.isMarked = cell.isMarked ? false : true;\r\n      return result;\r\n    }\r\n    case GAME_OVER: {\r\n      const result = [...state];\r\n      const cell = getCell(result, action.payload);\r\n      cell.isRevealed = true;\r\n      return result;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// ** Recoursive method does not good for big sized stack because of the js call stack limitation **\r\n// const revealEdgesRecoursive = board => {\r\n//   const innerRevealEdges = cellId => {\r\n//     const cell = board.get(cellId);\r\n//     if (cell.isRevealed) return;\r\n//     const revealedCell = { ...cell };\r\n//     revealedCell.isRevealed = true;\r\n//     board.set(cellId, revealedCell);\r\n//     cell.edges.forEach(cId => {\r\n//       if (cell.value === 0) {\r\n//         innerRevealEdges(board)(cId);\r\n//       }\r\n//     });\r\n//   };\r\n//   return innerRevealEdges;\r\n// };\r\n\r\n// DFS over the board to reveal all the cells\r\nconst revealEdgesIterative = board => {\r\n  const traverseDFS = cellId => {\r\n    const cell = getCell(board, cellId);\r\n    let stack = [cell];\r\n    while (stack.length) {\r\n      let cell = stack.pop();\r\n      if (cell.isRevealed) continue;\r\n      cell.isRevealed = true;\r\n      if (cell.value > 0) continue;\r\n\r\n      cell.edges.forEach(cId => {\r\n        const cell = getCell(board, cId);\r\n        if (!cell.isRevealed && !cell.alreadyIncluded) {\r\n          cell.alreadyIncluded = true;\r\n          stack.push(cell);\r\n        }\r\n      });\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  return traverseDFS;\r\n};\r\n\r\nconst createBoard = (width, height, mines) => {\r\n  const result = [];\r\n  const randomMiles = generateRandomMilesCords(mines, width, height);\r\n  for (let rowIndex = 0; rowIndex < height; rowIndex++) {\r\n    const row = [];\r\n    for (let colIndex = 0; colIndex < width; colIndex++) {\r\n      const cellId = generateIdKey(rowIndex, colIndex);\r\n      const cellEdges = getCellEdges(rowIndex, colIndex, width, height);\r\n      const isMined = randomMiles.includes(cellId);\r\n      const value = isMined ? 0 : countMinedCells(cellEdges, randomMiles);\r\n      row.push(createCell(cellId, value, isMined, cellEdges));\r\n    }\r\n    result.push(row);\r\n  }\r\n  return result;\r\n};\r\n\r\nconst getCellEdges = (row, col, width, height) => {\r\n  const result = [];\r\n  // top edge\r\n  if (row > 0) {\r\n    result.push(generateIdKey(row - 1, col));\r\n  }\r\n  // top right edge\r\n  if (row > 0 && col < width - 1) {\r\n    result.push(generateIdKey(row - 1, col + 1));\r\n  }\r\n  // right\r\n  if (col < width - 1) {\r\n    result.push(generateIdKey(row, col + 1));\r\n  }\r\n  // bottom right\r\n  if (row < height - 1 && col < width - 1) {\r\n    result.push(generateIdKey(row + 1, col + 1));\r\n  }\r\n  // bottom\r\n  if (row < height - 1) {\r\n    result.push(generateIdKey(row + 1, col));\r\n  }\r\n  // bottom left\r\n  if (row < height - 1 && col > 0) {\r\n    result.push(generateIdKey(row + 1, col - 1));\r\n  }\r\n  // left\r\n  if (col > 0) {\r\n    result.push(generateIdKey(row, col - 1));\r\n  }\r\n  return result;\r\n};\r\n\r\n// generate random cordinates for the miles on the board\r\nconst generateRandomMilesCords = (numberOfMiles, width, height) => {\r\n  const result = [];\r\n  do {\r\n    const row = Math.floor(Math.random() * height);\r\n    const col = Math.floor(Math.random() * width);\r\n    const key = generateIdKey(row, col);\r\n    if (!result.includes(key)) result.push(key);\r\n  } while (result.length < numberOfMiles);\r\n\r\n  return result;\r\n};\r\n\r\nconst countMinedCells = (edges, minedEdges) => {\r\n  let result = 0;\r\n  result = edges.reduce((result, curr) => {\r\n    if (minedEdges.includes(curr)) {\r\n      result++;\r\n    }\r\n    return result;\r\n  }, 0);\r\n  return result;\r\n};\r\n\r\nconst createCell = (id, value, isMine, edges) => {\r\n  const result = {};\r\n  result.id = id;\r\n  result.isMined = isMine;\r\n  result.value = value;\r\n  result.edges = edges;\r\n  return result;\r\n};\r\n\r\nconst generateIdKey = (row, col) => `${row}_${col}`;\r\nconst getCordsFromKey = key => key.split(\"_\");\r\nexport const getCell = (board, key) => {\r\n  const cords = getCordsFromKey(key);\r\n  return board.length > 0 ? board[cords[0]][cords[1]] : {};\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const GridCell = styled.div`\r\n  background-color: ${({ theme, isRevealed }) =>\r\n    isRevealed ? theme.cellClickedBgColor : theme.cellBgColor};\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transition: all 0.2s ease-in;\r\n  padding: 5px;\r\n  cursor: pointer;\r\n  ${({ isMarked, isMined, isRevealed }) => {\r\n    if (isMarked || (isRevealed && isMined)) {\r\n      return `\r\n        &::after{\r\n          color: red;\r\n          content: \"${(isMarked && \"⚑\") || (isMined && \"⚙\")}\";\r\n        }\r\n      `;\r\n    }\r\n  }};\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GridCell } from \"./Styled\";\r\n\r\n// one cell component.\r\n// we use react memo to prevent unnecessary render for each board change.\r\nconst Cell = React.memo(\r\n  ({ id, value, isMarked, isRevealed, isMined, onCellClick, onCellMark }) => {\r\n    const onClick = e => {\r\n      e.shiftKey ? onCellMark(id) : onCellClick(id);\r\n    };\r\n    const getValue = () => (isRevealed && value ? value : \"\");\r\n    return (\r\n      <GridCell\r\n        key={id}\r\n        onClick={onClick}\r\n        isMarked={isMarked}\r\n        isMined={isMined}\r\n        isRevealed={isRevealed}\r\n      >\r\n        <div>{getValue()}</div>\r\n      </GridCell>\r\n    );\r\n  }\r\n);\r\n\r\nconst noop = () => {};\r\n\r\nCell.propTypes = {\r\n  id: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  isMarked: PropTypes.bool,\r\n  isRevealed: PropTypes.bool,\r\n  onCellClick: PropTypes.func,\r\n  onCellMark: PropTypes.func\r\n};\r\n\r\nCell.defaultProps = {\r\n  id: \"\",\r\n  value: \"\",\r\n  isMarked: false,\r\n  isRevealed: false,\r\n  onCellClick: noop,\r\n  onCellMark: noop\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputWithLabelWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 1.2em !important;\r\n  margin: 0 5px;\r\n  min-width: 50px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 5px;\r\n  border: 1px solid #ccc;\r\n  flex: 1;\r\n`;\r\n\r\nconst InputWithLabel = props => {\r\n  const {\r\n    elementId,\r\n    label,\r\n    placeholder,\r\n    value,\r\n    type,\r\n    min,\r\n    max,\r\n    onChange\r\n  } = props;\r\n  return (\r\n    <InputWithLabelWrapper>\r\n      <Label htmlFor={elementId}>{`${label}:`}</Label>\r\n      <Input\r\n        id={elementId}\r\n        name={elementId}\r\n        type={type}\r\n        min={min}\r\n        max={max}\r\n        value={value}\r\n        placeholder={placeholder}\r\n        onChange={onChange}\r\n      />\r\n    </InputWithLabelWrapper>\r\n  );\r\n};\r\n\r\nexport default InputWithLabel;\r\n","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  background-color: ${({ theme }) => theme.btnBgColor};\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  transition: all 0.2s ease-in;\r\n  border: 1px solid ${({ theme }) => theme.screenBtnColor};\r\n  padding: 5px;\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n  text-transform: uppercase;\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.btnHoverBgColor};\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","// import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// const Toggle = props => {};\r\n\r\nexport const ToggleSwitchStyled = styled.button`\r\n  background-color: ${({ theme, isClickedState }) =>\r\n    isClickedState ? theme.cellHoverBgColor : theme.cellBgColor};\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  transition: all 0.2s ease-in;\r\n  border: 1px solid #ccc;\r\n  padding: 5px;\r\n  margin: 0 5px;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const SupermanSwitch = styled(ToggleSwitchStyled)`\r\n  ${({ theme, isClickedState }) => {\r\n    let color = \"red\";\r\n    let borderColor = \"red\";\r\n    let backgroundColor = theme.cellBgColor;\r\n    let fontWeight = \"300\";\r\n    if (isClickedState) {\r\n      backgroundColor = \"red\";\r\n      color = \"#fff\";\r\n      fontWeight = \"700\";\r\n    }\r\n    return `\r\n    background-color: ${backgroundColor};\r\n    border-color: ${borderColor};\r\n    color: ${color};\r\n    font-weignt: ${fontWeight};\r\n  `;\r\n  }}\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LogoStyled = styled.div`\r\n  font-size: 1.6em;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 5px 5px 10px 5px;\r\n  div {\r\n    padding: 5px 0 0 5px;\r\n    text-transform: uppercase;\r\n  }\r\n  &::before {\r\n    font-size: 1.2em;\r\n    content: \"⚙\";\r\n  }\r\n`;\r\n\r\nconst Logo = props => (\r\n  <LogoStyled>\r\n    <div>{props.text}</div>\r\n  </LogoStyled>\r\n);\r\n\r\nexport default Logo;\r\n","import styled from \"styled-components\";\r\n\r\nconst GameIndicator = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: 3em;\r\n  transition: all 500ms ease-in;\r\n  display: ${({ isGameOver, isGameDone }) =>\r\n    isGameOver || isGameDone ? \"block\" : \"none\"};\r\n\r\n  ${({ isGameDone, isGameOver }) => {\r\n    let bgColorResult = \"background-color: rgba(255, 255, 255, 0.5)\";\r\n    // if (isGameDone)\r\n    //   bgColorResult = \"background-color: rgba(255, 255, 255, 0.4)\";\r\n    if (isGameOver) bgColorResult = \"background-color: rgba(0, 0, 0, 0.5)\";\r\n    return bgColorResult;\r\n  }};\r\n`;\r\n\r\nexport default GameIndicator;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  state = {\r\n    hasError: false\r\n  };\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.error(error);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Minesweeper needed to be closed down. Please restart.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst animation = keyframes`\r\n    0% {\r\n      transform: rotate(0);\r\n      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\r\n    }\r\n    50% {\r\n      transform: rotate(900deg);\r\n      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n    }\r\n    100% {\r\n      transform: rotate(1800deg);\r\n    }\r\n  `;\r\n\r\nconst Loader = styled.div`\r\n  display: none;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  z-index: 999;\r\n  &::after {\r\n    content: \" \";\r\n    border-radius: 50%;\r\n    display: block;\r\n    width: 0;\r\n    height: 0;\r\n    box-sizing: border-box;\r\n    border: 26px solid #333;\r\n    border-color: #333 transparent #333 transparent;\r\n    animation: ${animation} 1.2s infinite;\r\n    top: 10%;\r\n    right: 50%;\r\n    transform: translate(-50%, -50%);\r\n    position: absolute;\r\n  }\r\n`;\r\n\r\nexport default Loader;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Grid = styled.div`\r\n/* display: flex; */\r\n  display: grid;\r\n  grid-template-columns: ${({ gameWidth = 5 }) =>\r\n    `repeat(${gameWidth},1.5em);`};\r\n  grid-template-rows: ${({ gameHeight = 5 }) =>\r\n    `repeat(${gameHeight}, 1.5em);`};\r\n  justify-content: center;\r\n  /* background-color: ${({ theme }) => theme.gridBgColor}; */\r\n  padding: 10px;\r\n  position: relative;\r\n  /* flex-direction: column;s */\r\n`;\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport {\r\n  onCellClick,\r\n  onCellMarked,\r\n  onGameOver\r\n} from \"../../actions/boardActions\";\r\nimport { resetGame, setNoMoreFlagsNot } from \"../../actions/gameActions\";\r\nimport { getCell } from \"../../reducers/boardReducer\";\r\nimport { GAME_OVER_STATUS, GAME_DONE_STATUS } from \"../../common/constants\";\r\nimport Cell from \"./Cell/Cell\";\r\nimport { GameIndicator } from \"../../components\";\r\nimport { Grid } from \"./Styled\";\r\n\r\n// main game board container.\r\n// we use a class component to prevent creating new callbacks for cell comp and by that a new unnecessary render for that.\r\n// react hooks has a solution for that by using useCallback hook\r\n// but it doesn't help us here because of the internal use of the closure variable of board/game.\r\nclass GameBoard extends React.Component {\r\n  componentDidMount() {\r\n    const { config, actions } = this.props;\r\n    actions.resetGame(config);\r\n  }\r\n\r\n  onCellClick = id => {\r\n    const { board, game, actions } = this.props;\r\n    const cell = getCell(board, id);\r\n    const isMarked = game.markedCells.includes(id);\r\n    if (!isMarked && !cell.isRevealed) {\r\n      cell.isMined ? actions.onGameOver(id) : actions.onCellClick(id);\r\n    }\r\n  };\r\n\r\n  onCellMark = id => {\r\n    const { config, game, actions } = this.props;\r\n    const remainingFlags = config.mines - game.markedCells.length;\r\n    const isMarked = game.markedCells.includes(id);\r\n    remainingFlags === 0 && actions.setNoMoreFlagsNot();\r\n    (remainingFlags > 0 || isMarked) && actions.onCellMarked(id);\r\n  };\r\n\r\n  render() {\r\n    const { board, config, game } = this.props;\r\n\r\n    const isGameOver = game.status === GAME_OVER_STATUS;\r\n    const isGameDone = game.status === GAME_DONE_STATUS;\r\n    const isSupermanMode = game.isSuperman;\r\n\r\n    return (\r\n      <Grid gameWidth={config.width} gameHeight={config.height}>\r\n        <GameIndicator isGameOver={isGameOver} isGameDone={isGameDone} />\r\n        {board.map(row =>\r\n          row.map(cell => (\r\n            <Cell\r\n              key={cell.id}\r\n              id={cell.id}\r\n              isMarked={cell.isMarked}\r\n              isMined={cell.isMined}\r\n              isRevealed={\r\n                isSupermanMode && cell.isMined ? true : cell.isRevealed\r\n              }\r\n              value={cell.value}\r\n              onCellClick={this.onCellClick}\r\n              onCellMark={this.onCellMark}\r\n            />\r\n          ))\r\n        )}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    config: store.config,\r\n    board: store.board,\r\n    game: store.game\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  const combinedActions = {\r\n    onCellClick,\r\n    onGameOver,\r\n    resetGame,\r\n    onCellMarked,\r\n    setNoMoreFlagsNot\r\n  };\r\n  return {\r\n    actions: bindActionCreators(combinedActions, dispatch)\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GameBoard);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ConfigWrapper = styled.div`\r\n  background-color: ${({ theme }) => theme.configBgColor};\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n`;\r\n\r\nexport const ConfigRow = styled.div`\r\n  display: flex;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport {\r\n  MAX_HEIGHT,\r\n  MAX_WIDTH,\r\n  GAME_DONE_STATUS,\r\n  GAME_OVER_STATUS\r\n} from \"../../common/constants\";\r\nimport { InputWithLabel, Button, SupermanSwitch } from \"../../components\";\r\nimport { setSupermanMode, resetGame } from \"../../actions/gameActions\";\r\n\r\n// import { ERROR_RESTART_METHOD_DOESNT_EXIST } from \"../../common/constants\";\r\nimport { ConfigWrapper } from \"./Styled\";\r\n\r\nconst GameConfig = props => {\r\n  const { width, height, mines, isSuperman, status, actions } = props;\r\n  const [gameWidth, setGameWidthToState] = useState(width);\r\n  const [gameHeight, setGameHeightToState] = useState(height);\r\n  const [gameMines, setGameMinesToState] = useState(mines);\r\n\r\n  const onResetClick = () => {\r\n    const config = {\r\n      width: gameWidth,\r\n      height: gameHeight,\r\n      mines: gameMines,\r\n      isSuperman: false\r\n    };\r\n    actions.resetGame(config);\r\n  };\r\n\r\n  const validate = (value, max, min = 1) => value >= min && value <= max;\r\n\r\n  const onWidthChange = e => {\r\n    const value = e.target.value ? e.target.valueAsNumber : 0;\r\n    if (validate(value, MAX_WIDTH)) {\r\n      setGameWidthToState(value);\r\n    }\r\n  };\r\n\r\n  const onHeightChange = e => {\r\n    const value = e.target.value ? e.target.valueAsNumber : 0;\r\n    if (validate(value, MAX_HEIGHT)) {\r\n      setGameHeightToState(value);\r\n    }\r\n  };\r\n\r\n  const onMinesChange = e => {\r\n    const value = e.target.value ? e.target.valueAsNumber : 0;\r\n    if (validate(value, gameHeight * gameWidth)) {\r\n      setGameMinesToState(value);\r\n    }\r\n  };\r\n\r\n  const isGameOver = status === GAME_OVER_STATUS;\r\n  const isGameDone = status === GAME_DONE_STATUS;\r\n\r\n  return (\r\n    <ConfigWrapper>\r\n      <InputWithLabel\r\n        elementId=\"width-input\"\r\n        type=\"number\"\r\n        min={0}\r\n        max={MAX_WIDTH}\r\n        value={gameWidth}\r\n        label=\"witdh\"\r\n        placeholder=\"Game witdh...\"\r\n        onChange={onWidthChange}\r\n      />\r\n      <InputWithLabel\r\n        elementId=\"height-input\"\r\n        type=\"number\"\r\n        min={1}\r\n        max={MAX_HEIGHT}\r\n        value={gameHeight}\r\n        label=\"height\"\r\n        placeholder=\"Game height...\"\r\n        onChange={onHeightChange}\r\n      />\r\n      <InputWithLabel\r\n        elementId=\"mines-input\"\r\n        type=\"number\"\r\n        min={1}\r\n        max={gameHeight * gameWidth}\r\n        value={gameMines}\r\n        label=\"mines\"\r\n        placeholder=\"Mines Numbers...\"\r\n        onChange={onMinesChange}\r\n      />\r\n      <Button id=\"reset-btn\" onClick={onResetClick}>\r\n        Reset Game\r\n      </Button>\r\n      <SupermanSwitch\r\n        id=\"superman-switch\"\r\n        isClickedState={isSuperman}\r\n        onClick={actions.setSupermanMode}\r\n        title=\"Superman Mode\"\r\n        disabled={isGameOver || isGameDone}\r\n      >\r\n        S\r\n      </SupermanSwitch>\r\n    </ConfigWrapper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    ...store.config,\r\n    ...store.game\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  const combinedActions = {\r\n    setSupermanMode,\r\n    resetGame\r\n  };\r\n  return {\r\n    actions: bindActionCreators(combinedActions, dispatch)\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GameConfig);\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst rollToRight = keyframes`\r\n    0% { left: -50%;}\r\n    100%{ left : 100%;}\r\n`;\r\n\r\nexport const ScreenWrapper = styled.div`\r\n  background-color: ${({ theme }) => theme.screenBgColor};\r\n  color: ${({ isGameDone, isGameOver }) =>\r\n    isGameDone ? \"#00ff00\" : isGameOver ? \"#fd3535\" : \"#fff\"};\r\n  border: 5px solid #ccc;\r\n  padding: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  font-size: 2em;\r\n  div {\r\n    /* min-width: 100%;\r\n    position: absolute;\r\n    animation: ${rollToRight} 10s linear infinite; */\r\n  }\r\n`;\r\n\r\nconst blinking = keyframes`\r\n50% { opacity: 0; }\r\n`;\r\n\r\nexport const BlinkingText = styled.div`\r\n  animation: ${blinking} 1s linear infinite;\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  GAME_DONE_STATUS,\r\n  GAME_OVER_STATUS,\r\n  GAME_PLAYING_STATUS,\r\n  SCREEN_GAME_OVER,\r\n  SCREEN_GAME_PLAYING,\r\n  SCREEN_GAME_DONE\r\n} from \"../../common/constants\";\r\n\r\n// import { ERROR_RESTART_METHOD_DOESNT_EXIST } from \"../../common/constants\";\r\nimport { ScreenWrapper, BlinkingText } from \"./Styled\";\r\n\r\nconst GameScreen = ({ status, remainingFlags, tempMessage }) => {\r\n  const getText = () => {\r\n    let result = \"\";\r\n    switch (status) {\r\n      case GAME_PLAYING_STATUS:\r\n        result = `${SCREEN_GAME_PLAYING} - ${remainingFlags} FLAGS REMAINING`;\r\n        break;\r\n      case GAME_OVER_STATUS:\r\n        result = SCREEN_GAME_OVER;\r\n        break;\r\n      case GAME_DONE_STATUS:\r\n        result = SCREEN_GAME_DONE;\r\n        break;\r\n      default:\r\n    }\r\n    return result;\r\n  };\r\n  const isGameOver = status === GAME_OVER_STATUS;\r\n  const isGameDone = status === GAME_DONE_STATUS;\r\n  const tempMessageExist = tempMessage && tempMessage.length > 0;\r\n  return (\r\n    <ScreenWrapper isGameOver={isGameOver} isGameDone={isGameDone}>\r\n      {tempMessageExist ? (\r\n        <BlinkingText>{tempMessage}</BlinkingText>\r\n      ) : (\r\n        <div>{getText()}</div>\r\n      )}\r\n    </ScreenWrapper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    remainingFlags: store.config.mines - store.game.markedCells.length,\r\n    status: store.game.status,\r\n    tempMessage: store.game.tempMessage\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(GameScreen);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Loader } from \"../components\";\r\n\r\nconst MaybeLoader = ({ loading }) => {\r\n  return loading && <Loader />;\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    loading: store.game.loading\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MaybeLoader);\r\n","import { CELL_MARKED } from \"../common/actionsTypes\";\r\nimport { setGameDone } from \"../actions/gameActions\";\r\nimport { getCell } from \"../reducers/boardReducer\";\r\n\r\n// game done middleware to dispatch a new game status whether the latest marked flag is currect.\r\nexport default ({ dispatch, getState }) => next => action => {\r\n  switch (action.type) {\r\n    case CELL_MARKED:\r\n      const { board, game, config } = getState();\r\n      const isAlreadyMarked = game.markedCells.includes(action.payload);\r\n      const isMarkedEnough = game.markedCells.length + 1 === config.mines;\r\n      if (isMarkedEnough && !isAlreadyMarked) {\r\n        const isGameDone = game.markedCells.every(mc => {\r\n          const cell = getCell(board, mc);\r\n          if (!cell.isMined) return false;\r\n          return true;\r\n        });\r\n        isGameDone && dispatch(setGameDone());\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  next(action);\r\n};\r\n","import { SET_CONFIG, INIT_GAME } from \"../common/actionsTypes\";\r\nimport initialState from \"../store/initialState\";\r\n\r\nexport default (state = initialState.config, action) => {\r\n  switch (action.type) {\r\n    case INIT_GAME:\r\n    case SET_CONFIG:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  GAME_OVER_STATUS,\r\n  GAME_DONE_STATUS,\r\n  GAME_PLAYING_STATUS\r\n} from \"../common/constants\";\r\nimport {\r\n  GAME_OVER,\r\n  INIT_GAME,\r\n  GAME_DONE,\r\n  GAME_LOADING,\r\n  SET_SUPERMAN_MODE,\r\n  CELL_MARKED,\r\n  SET_TEMP_MESSAGE\r\n} from \"../common/actionsTypes\";\r\nimport initialState from \"../store/initialState\";\r\n\r\nexport default (state = initialState.game, action) => {\r\n  switch (action.type) {\r\n    case INIT_GAME:\r\n      return {\r\n        ...state,\r\n        status: GAME_PLAYING_STATUS,\r\n        markedCells: initialState.game.markedCells,\r\n        loading: true\r\n      };\r\n    case GAME_OVER:\r\n      return {\r\n        ...state,\r\n        status: GAME_OVER_STATUS\r\n      };\r\n    case GAME_DONE:\r\n      return {\r\n        ...state,\r\n        status: GAME_DONE_STATUS\r\n      };\r\n    case GAME_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    case SET_SUPERMAN_MODE:\r\n      return {\r\n        ...state,\r\n        isSuperman: state.isSuperman ? false : true\r\n      };\r\n    case CELL_MARKED: {\r\n      const existingIndex = state.markedCells.indexOf(action.payload);\r\n      const result = [...state.markedCells];\r\n      if (existingIndex > -1) {\r\n        result.splice(existingIndex, 1);\r\n      } else {\r\n        result.push(action.payload);\r\n      }\r\n      return {\r\n        ...state,\r\n        markedCells: result\r\n      };\r\n    }\r\n    case SET_TEMP_MESSAGE: {\r\n      return {\r\n        ...state,\r\n        tempMessage: action.payload\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport config from \"./configReducer\";\r\nimport board from \"./boardReducer\";\r\nimport game from \"./gameReducer\";\r\n\r\nexport default () =>\r\n  combineReducers({\r\n    board,\r\n    config,\r\n    game\r\n  });\r\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport gameMiddleware from \"../middlewares/gameMiddleware\";\r\nimport internalState from \"./initialState\";\r\nimport createRootReducer from \"../reducers\";\r\n\r\nfunction configureStore(externalState) {\r\n  const initialState = {\r\n    ...internalState,\r\n    ...externalState\r\n  };\r\n  const middlewares = [thunk, gameMiddleware];\r\n  return createStore(\r\n    createRootReducer(),\r\n    initialState,\r\n    compose(applyMiddleware(...middlewares))\r\n  );\r\n}\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"../store\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { ErrorBoundary } from \"../components\";\r\n\r\nconst AppWrapper = props => {\r\n  const { externalState, externalTheme, children } = props;\r\n  const store = configureStore(externalState);\r\n  // override basic theme values with externalTheme values\r\n  // const theme = { ...basicTheme, ...externalTheme };\r\n  const theme = { ...externalTheme };\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <ErrorBoundary>{children}</ErrorBoundary>\r\n      </ThemeProvider>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default AppWrapper;\r\n","import styled from \"styled-components\";\r\n\r\nconst size = {\r\n  mobileS: \"320px\",\r\n  mobileM: \"375px\",\r\n  mobileL: \"425px\",\r\n  tablet: \"768px\",\r\n  laptop: \"1024px\",\r\n  laptopL: \"1440px\",\r\n  desktop: \"2560px\"\r\n};\r\nconst device = {\r\n  mobileL: `(max-width: ${size.mobileL})`\r\n};\r\n\r\nexport const GameWrapper = styled.div`\r\n  font-family: \"Raleway\", sans-serif;\r\n  font-size: 15px;\r\n  position: relative;\r\n  @media ${device.mobileL} {\r\n    font-size: 10px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { GameBoard, GameConfig, GameScreen, MaybeLoader } from \"./\";\r\nimport { Logo } from \"../components\";\r\nimport AppWrapper from \"./AppWrapper\";\r\nimport { GameWrapper } from \"./Styled\";\r\n\r\nconst Minesweeper = props => {\r\n  return (\r\n    <AppWrapper {...props}>\r\n      <GameWrapper>\r\n        <MaybeLoader />\r\n        <Logo text=\"Minesweeper\" />\r\n        <GameConfig />\r\n        <GameScreen />\r\n        <GameBoard />\r\n      </GameWrapper>\r\n    </AppWrapper>\r\n  );\r\n};\r\n\r\nexport default Minesweeper;\r\n","import React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport Minesweeper from \"./containers/Minesweeper\";\n\n/**** PUBLIC API METHODS ****/\n\nfunction mount(\n  element = document.querySelector(\"#minesweeper-app\"),\n  props,\n  externalState,\n  callback = () => {}\n) {\n  render(\n    <Minesweeper externalState={externalState} {...props} />,\n    element,\n    callback\n  );\n}\n\nfunction unmount(\n  element = document.querySelector(\"#minesweeper-app\"),\n  callback = () => {}\n) {\n  const wasMounted = unmountComponentAtNode(element);\n  callback(wasMounted);\n}\n\nwindow.wixDOM = {\n  ...window.wixDOM,\n  minesweeper: { mount, unmount }\n};\n\n/**** END PUBLIC API METHODS ****/\n\nwindow.wixDOM.minesweeper.theme = {\n  gridBgColor: \"#eb4d55\",\n  cellBgColor: \"#FBDCDE\",\n  cellClickedBgColor: \"#CCADAF\",\n  cellHoverBgColor: \"#332C2D\",\n  btnBgColor: \"#fff\",\n  btnHoverBgColor: \"#FBDCDE\",\n  configBgColor: \"#f6e1e1\",\n  screenBgColor: \"#333\"\n};\nconst externalProps = {\n  appVersion: 1,\n  externalTheme: { ...window.wixDOM.minesweeper.theme }\n};\nconst element = document.querySelector(\"#minesweeper-app\");\nwindow.wixDOM.minesweeper.mount(element, externalProps);\n"],"sourceRoot":""}